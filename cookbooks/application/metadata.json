{
  "name": "application",
  "version": "4.1.4",
  "description": "Deploys and configures a variety of applications",
  "long_description": "Application cookbook\n====================\nThis cookbook is designed to be able to describe and deploy web applications. It provides the basic infrastructure; other cookbooks are required to support specific combinations of frameworks and application servers. The following cookbooks are available at this time:\n\n- [application_java](https://github.com/opscode-cookbooks/application_java) (Java and Tomcat)\n- [application_nginx](https://github.com/opscode-cookbooks/application_nginx) (nginx reverse proxy)\n- [application_php](https://github.com/opscode-cookbooks/application_php) (PHP with `mod_php_apache2`)\n- [application_python](https://github.com/opscode-cookbooks/application_python) (Django with Gunicorn)\n- [application_ruby](https://github.com/opscode-cookbooks/application_ruby) (Rails with Passenger or Unicorn)\n\n\nBackwards Compatibility\n-----------------------\n- Version 4.0.0 dropped support for Chef 10\n- Version 2.0.0 dropped support for the `apps` data bag.\n\n\nRequirements\n------------\nThe previous dependencies have been moved out to the application-stack-specific cookbooks, and this cookbook has no external dependencies.\n\n\nResources/Providers\n-------------------\nThe `application` LWRP configures the basic properties of most applications, regardless of the framework or application server they use. These include:\n\n- SCM information for the deployment, such as the repository URL and branch name;\n- deployment destination, including the filesystem path to deploy to;\n- any OS packages to install as dependencies;\n- optional callback to control the deployment.\n\nThis LWRP uses the `deploy_revision` LWRP to perform the bulk of its tasks, and many concepts and parameters map directly to it. Check the documentation for `deploy_revision` for more information.\n\nConfiguration of framework-specific aspects of the application are performed by invoking a sub-resource; see the appropriate cookbook for more documentation.\n\n### Actions\n- `:deploy`: deploy an application, including any necessary configuration, restarting the associated service if necessary\n- `:force_deploy`: same as `:deploy`, but it will send a `:force_deploy` action to the deploy resource, directing it to deploy the application even if the same revision is already deployed\n\n### Attribute Parameters\n- `name`: name attribute. The name of the application you are setting up. This will be used to derive the default value for other attribute\n- `packages`: an Array or Hash of packages to be installed before starting the deployment\n- `path`: target path of the deployment; it will be created if it does not exist\n- `owner`: the user that shall own the target path\n- `group`: the group that shall own the target path\n- `strategy`: the underlying LWRP that will be used to perform the deployment. The default is `:deploy_revision`, and it should never be necessary to change it\n- `scm_provider`: the provider class to use for the deployment. It defaults to `Chef::Provider::Git`, you can set it to `Chef::Provider::Subversion` to deploy from an SVN repository\n- `repository`: the URL of the repository the application should be checked out from\n- `revision`: an identifier pointing to the revision that should be checked out\n- `deploy_key`: the private key to use to access the repository via SSH\n- `rollback_on_error`: if true, exceptions during a deployment will be caught and a clean rollback to the previous version will be attempted; the exception will then be re-raised. Defaults to true; change it only if you know what you are doing\n- `environment`: a Hash of environment variables to set while running migrations\n- `purge_before_symlink`: an Array of paths (relative to the checkout) to remove before creating symlinks\n- `create_dirs_before_symlink`: an Array of paths (relative to the checkout) pointing to directories to create before creating symlinks\n- `symlinks`: a Hash of shared/dir/path => release/dir/path. It determines which files and dirs in the shared directory get symlinked to the current release directory\n- `symlink_before_migrate`: similar to symlinks, except that they will be linked before any migration is run\n- `migrate`: if `true` then migrations will be run; defaults to false\n- `migration_command`: a command to run to migrate the application from the previous to the current state\n- `restart_command`: a command to run when restarting the application\n- `environment_name`: the name of a framework-specific \"environment\" (for example the Rails environment). By default it is the same as the Chef environment, unless it is `_default`, in which case it is set to `production`\n- `enable_submodules`: whether to enable git submodules in the deploy, passed into the deploy resource.\n\n### Callback Attributes\nYou can also set a few attributes on this LWRP that are interpreted as callback to be called at specific points during a deployment. If you pass a block, it will be evaluated within a new context. If you pass a string, it will be interpreted as a path (relative to the release directory) to a file; if it exists, it will be loaded and evaluated as though it were a Chef recipe.\n\nThe following callback attributes are available:\n\n- `before_deploy`: invoked immediately after initial setup and before the deployment proper is started. This callback will be invoked on every Chef run\n- `before_migrate`\n- `before_symlink`\n- `before_restart`\n- `after_restart`\n\n### Sub-resources\nAnything that is not a known attribute will be interpreted as the name of a sub-resource; the resource will be looked up, and any nested attribute will be passed to it. More than one sub-resource can be added to an application; the order is significant, with the latter sub-resources overriding any sub-resource that comes before.\n\nSub-resources can set their own values for some attributes; if they do, they will be merged together with the attribute set on the main resource. The attributes that support this behavior are the following:\n\n- `environment`: environment variables from the application and from sub-resources will be merged together, with later resources overriding values set in the application or previous resources\n- `migration_command`: commands from the application and from sub-resources will be concatenated together joined with '&&' and run as a single shell command. The migration will only succeed if all the commands succeed\n- `restart_command`: commands from the application and from sub-resources will be evaluated in order\n- `symlink_before_migrate`: will be concatenated as a single array\n- `callbacks`: sub-resources callbacks will be invoked first, followed by the application callbacks\n\n\nUsage\n-----\nTo use the application cookbook we recommend creating a cookbook named after the application, e.g. `my_app`. In `metadata.rb` you should declare a dependency on this cookbook and any framework cookbook the application may need. For example a Rails application may include:\n\n```ruby\ndepends 'application'\ndepends 'application_ruby'\n```\n\nThe default recipe should describe your application using the `application` LWRP; you may also include additional recipes, for example to set up a database, queues, search engines and other components of your application.\n\nA recipe using this LWRP may look like this:\n\n```ruby\napplication 'my_app' do\n  path  '/deploy/to/dir'\n  owner 'app-user'\n  group 'app-group'\n\n  repository 'http://git.example.com/my-app.git'\n  revision   'production'\n\n  # Apply the rails LWRP from application_ruby\n  rails do\n    # Rails-specific configuration. See the README in the\n    # application_ruby cookbook for more information.\n  end\n\n  # Apply the passenger_apache2 LWRP, also from application_ruby\n  passenger_apache2 do\n    # Passenger-specific configuration.\n  end\nend\n```\n\nYou can of course use any code necessary to determine the value of attributes:\n\n```ruby\napplication 'my_app' do\n  repository 'http://git.example.com/my-app.git'\n  revision   node.chef_environment == 'production' ? 'production' : 'develop'\nend\n```\n\nAttributes from the application and from sub-resources are merged together:\n\n```ruby\napplication 'my_app' do\n  restart_command 'kill -1 `cat /var/run/one.pid`'\n  environment     'LC_ALL' => 'en', 'FOO' => 'bar'\n\n  rails do\n    restart_command 'touch /tmp/something'\n    environment     'LC_ALL' => 'en_US'\n  end\n\n  passenger_apache2 do\n    environment 'FOO' => 'baz'\n  end\nend\n\n# at the end, you will have:\n#\n# restart_command #=> kill -1 `cat /var/run/one.pid` && touch /tmp/something\n# environment #=> LC_ALL=en_US FOO=baz\n```\n\nMost databases have the concept of migrations (or you can just use your own):\n\n```ruby\napplication 'my_app' do\n  path  '/deploy/to/dir'\n  owner 'app-user'\n  group 'app-group'\n\n  repository 'http://git.example.com/my-app.git'\n  revision   'production'\n\n  php do\n    migrate true\n    migration_command 'your-applications-migrate-command'\n  end\nend\n```\n\nThis will run `your-applications-migrate-command`, with the current directory set to the directory of the current checkout.\n\nTo use the application cookbook, we recommend creating a role named after the application, e.g. `my_app`. Create a Ruby DSL role in your chef-repo, or create the role directly with knife.\n\n```ruby\nname 'my_app'\ndescription 'My application deployment'\nrun_list([\n  'recipe[my_app::default]'\n])\n```\n\n\nLicense and Authors\n-------------------\n- Author: Adam Jacob (<adam@opscode.com>)\n- Author: Andrea Campi (<andrea.campi@zephirworks.com.com>)\n- Author: Joshua Timberman (<joshua@opscode.com>)\n- Author: Noah Kantrowitz  (<noah@opscode.com>)\n- Author: Seth Chisamore (<schisamo@opscode.com>)\n\n```text\nCopyright 2009-2013, Opscode, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "maintainer": "Opscode, Inc.",
  "maintainer_email": "cookbooks@opscode.com",
  "license": "Apache 2.0",
  "platforms": {
  },
  "dependencies": {
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "application": "Empty placeholder recipe, use the LWRPs, see README.md."
  }
}